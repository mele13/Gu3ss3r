{% extends "base_pex.html.twig" %}

{% set title = "Program explanation" %}

{% block body %}
    <div class="container">
        <header>
            <a href="{{ path('landing') }}" class="home-button">Home</a>
            <a href="{{ path('game') }}">Play</a> <!-- path('/gu3ss3r/game') -->
        </header>

        <div class="text">
            <h1>Program explanation</h1>
            <p class="non-bordered-text">
                When given a problem in which a number between a minimum value and a maximum value must be searched, the best
                way of finding this number is - technically - through binary search.<br><br>
                The main idea of binary search is to ‘keep track’ of the range of guesses. For instance, if given a minValue
                (1) and a maxValue (10.000.000.000) to search for an input number  - let’s say for the example’s sake that this
                input is 23 - the program should search by turns if the given number is higher or lower than the guessed one.<br><br>
                For instance, the program guesses 70 but when compared to the input, it finds the guess should be smaller.
                The program guesses 20 but it happens the opposite: the guess should be larger. Therefore, a new range of
                numbers in which to be searched is created.<br><br>
                Take a look at the step-by-step description:<br>
                1 - Min value = 1 || Max value = 10.000.000.000<br>
                2 - Guessed number = ((maxValue - minvalue) / 2 ) + minValue<br>
                3 - If the guessed number equals the user’s input, the program stops<br>
                4 - If the guess was too high, maxValue = guessNumber - 1 and go back to step 2<br>
                5 - If the guess was too low, minValue = guessNumber + 1 and go back to step 2
            </p>
            <p class="bordered-text">
                This game pretends to compare different ways of finding the user’s input in order to find the most optimal method.<br>
                As a player, you can check how the total time in which the same input is found varies depending on the
                method used. Therefore, you can build your own opinion.<br>
                Is binary search really the optimal way of finding a number between a range of numbers?
            </p>
        </div>
    </div>
{% endblock %}